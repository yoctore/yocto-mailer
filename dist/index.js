"use strict";function Mailer(){this.nodemailer=nodemailer,this.mandrill=mandrill,this.mailerType={},this.mailerTypeString="",this.logger=logger}var nodemailer=require("./modules/nodemailer/"),mandrill=require("./modules/mandrill/"),logger=require("yocto-logger"),_=require("lodash"),joi=require("joi"),promise=require("promise");Mailer.prototype.get=function(a){return this[a]},Mailer.prototype.use=function(a){return"nodemailer"===a.toLowerCase()?(this.mailerType=this.nodemailer,void(this.mailerTypeString="nodemailer")):"mandrill"===a.toLowerCase()?(this.mailerType=this.mandrill,void(this.mailerTypeString="mandrill")):void this.logger.error('[ Mailer.use ] - You should use "nodemailer" or "mandrill"')},Mailer.prototype.addRecipient=function(a){return this.processEmailFormat(a,"to")},Mailer.prototype.setExpeditor=function(a){if(!_.isString(a))return logger.error("Expeditor should be a string email"),!1;var b="from_email";return"nodemailer"===this.mailerTypeString&&(b="from"),this.processEmailFormat(a,"nodemailer"==this.mailerTypeString?"from":"from_email")},Mailer.prototype.addCC=function(a){var b="to";return"nodemailer"===this.mailerTypeString&&(b="cc"),this.processEmailFormat(a,b,"cc")},Mailer.prototype.addBCC=function(a){var b="to";return"nodemailer"===this.mailerTypeString&&(b="bcc"),this.processEmailFormat(a,b,"bcc")},Mailer.prototype.processEmailFormat=function(a,b,c){if(console.log("---- \n data : ",a,"option",b),_.isEmpty(this.mailerType))return void this.logger.error("MailerType is not define, please define your mailer whith use(String) function !");if(this.logger.info("[ Mailer.processEmailFormat ] - start  typeof data : "+typeof a),"from_email"!==b&&"from"!==b&&!_.isObject(a))return this.logger.error("[ Mailer.processEmailFormat ] Error "+b+" should be on object or array of object"),!1;var d=joi.string().email();return _.isObject(a)&&(_.isArray(a)?(_.forEach(a,function(a){a.address=a.email,a.type=_.isEmpty(c)?b:c}),d=joi.array().items(joi.object().keys({email:joi.string().email(),address:joi.string().email(),name:joi.string(),type:joi.string()}))):(a=_.merge(a,{type:_.isEmpty(c)?b:c}),a.address=a.email,d=joi.object().keys({email:joi.string().email(),address:joi.string().email(),name:joi.string(),type:joi.string()}))),d=d.validate(a),_.isEmpty(d)||_.isEmpty(d.error)?(this.logger.debug("[ MandrillWrapper.processEmailFormat ] - Validation email for field : "+(_.isEmpty(c)?b:c)),_.isArray(this.mailerType.mailOptions[b])&&_.isObject(a)?_.isArray(a)?(_.forEach(a,function(a){this.mailerType.mailOptions[b].push(a)},this),!0):(this.mailerType.mailOptions[b].push(a),!0):(this.mailerType.mailOptions[b]=a,!0)):(console.log(d),this.logger.error("[ MandrillWrapper.processEmailFormat ] - Validation email failed, at least one string dosen't pass email validation for field : "+b),!1)},Mailer.prototype.setConfig=function(a){return _.isEmpty(this.mailerType)?void this.logger.error("MailerType is not define, please define your mailer whith use(String) function !"):void this.mailerType.setConfig(a)},Mailer.prototype.send=function(a,b){if(_.isEmpty(this.mailerType))return void this.logger.error("MailerType is not define, please define your mailer whith use(String) function !");var c=this;return new promise(function(d,e){c.mailerType.send(a,b,function(a){d(a)},function(a){e(a)})})},module.exports=new Mailer;